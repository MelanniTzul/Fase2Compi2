window.PEGGY = // @generated by Peggy 4.0.3.
//
// https://peggyjs.org/
(function() {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "\n";
  var peg$c1 = ".";
  var peg$c2 = "align";
  var peg$c3 = "ascii";
  var peg$c4 = "asciz";
  var peg$c5 = "byte";
  var peg$c6 = "hword";
  var peg$c7 = "word";
  var peg$c8 = "quad";
  var peg$c9 = "data";
  var peg$c10 = "text";
  var peg$c11 = "global";
  var peg$c12 = "section";
  var peg$c13 = "space";
  var peg$c14 = "zero";
  var peg$c15 = "incbin";
  var peg$c16 = "set";
  var peg$c17 = "equ";
  var peg$c18 = "bss";
  var peg$c19 = ":";
  var peg$c20 = "add";
  var peg$c21 = ",";
  var peg$c22 = "ands";
  var peg$c23 = ", ";
  var peg$c24 = "sub";
  var peg$c25 = "mul";
  var peg$c26 = "div";
  var peg$c27 = "udiv";
  var peg$c28 = "sdiv";
  var peg$c29 = "and";
  var peg$c30 = "orr";
  var peg$c31 = "eor";
  var peg$c32 = "mov";
  var peg$c33 = "ldr";
  var peg$c34 = "=";
  var peg$c35 = "[";
  var peg$c36 = "]";
  var peg$c37 = "ldrb";
  var peg$c38 = "ldp";
  var peg$c39 = "str";
  var peg$c40 = "strb";
  var peg$c41 = "stp";
  var peg$c42 = "mvn";
  var peg$c43 = "lsl";
  var peg$c44 = "lsr";
  var peg$c45 = "asr";
  var peg$c46 = "ror";
  var peg$c47 = "cmp";
  var peg$c48 = "csel";
  var peg$c49 = "cset";
  var peg$c50 = "b";
  var peg$c51 = "bl";
  var peg$c52 = "ble";
  var peg$c53 = "ret";
  var peg$c54 = "beq";
  var peg$c55 = "bne";
  var peg$c56 = "bgt";
  var peg$c57 = "blt";
  var peg$c58 = "svc";
  var peg$c59 = "uxtb";
  var peg$c60 = "x";
  var peg$c61 = "30";
  var peg$c62 = "sp";
  var peg$c63 = "lr";
  var peg$c64 = "zr";
  var peg$c65 = "w";
  var peg$c66 = "uxth";
  var peg$c67 = "uxtw";
  var peg$c68 = "uxtx";
  var peg$c69 = "sxtb";
  var peg$c70 = "sxth";
  var peg$c71 = "sxtw";
  var peg$c72 = "sxtx";
  var peg$c73 = "eq";
  var peg$c74 = "ne";
  var peg$c75 = "gt";
  var peg$c76 = "ge";
  var peg$c77 = "lt";
  var peg$c78 = "le";
  var peg$c79 = "hi";
  var peg$c80 = "ls";
  var peg$c81 = "#";
  var peg$c82 = "0b";
  var peg$c83 = "0x";
  var peg$c84 = "'";
  var peg$c85 = "-";
  var peg$c86 = "\"";
  var peg$c87 = "//";
  var peg$c88 = ";";
  var peg$c89 = "/*";
  var peg$c90 = "*/";

  var peg$r0 = /^[12]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[01]/;
  var peg$r3 = /^[0-9a-fA-F]/;
  var peg$r4 = /^[a-zA-Z]/;
  var peg$r5 = /^[a-zA-Z_]/;
  var peg$r6 = /^[a-zA-Z0-9_]/;
  var peg$r7 = /^[^"]/;
  var peg$r8 = /^[^\n]/;
  var peg$r9 = /^[^*]/;
  var peg$r10 = /^[*]/;
  var peg$r11 = /^[^*\/]/;
  var peg$r12 = /^[ \t]/;

  var peg$e0 = peg$literalExpectation("\n", false);
  var peg$e1 = peg$literalExpectation(".", false);
  var peg$e2 = peg$literalExpectation("align", false);
  var peg$e3 = peg$literalExpectation("ascii", false);
  var peg$e4 = peg$literalExpectation("asciz", false);
  var peg$e5 = peg$literalExpectation("byte", false);
  var peg$e6 = peg$literalExpectation("hword", false);
  var peg$e7 = peg$literalExpectation("word", false);
  var peg$e8 = peg$literalExpectation("quad", false);
  var peg$e9 = peg$literalExpectation("data", false);
  var peg$e10 = peg$literalExpectation("text", false);
  var peg$e11 = peg$literalExpectation("global", false);
  var peg$e12 = peg$literalExpectation("section", false);
  var peg$e13 = peg$literalExpectation("space", false);
  var peg$e14 = peg$literalExpectation("zero", false);
  var peg$e15 = peg$literalExpectation("incbin", false);
  var peg$e16 = peg$literalExpectation("set", false);
  var peg$e17 = peg$literalExpectation("equ", false);
  var peg$e18 = peg$literalExpectation("bss", false);
  var peg$e19 = peg$literalExpectation(":", false);
  var peg$e20 = peg$otherExpectation("Instrucci\xF3n de Suma");
  var peg$e21 = peg$literalExpectation("ADD", true);
  var peg$e22 = peg$literalExpectation(",", false);
  var peg$e23 = peg$otherExpectation("Instrucci\xF3n de ands");
  var peg$e24 = peg$literalExpectation("ANDS", true);
  var peg$e25 = peg$literalExpectation(", ", false);
  var peg$e26 = peg$literalExpectation("SUB", true);
  var peg$e27 = peg$literalExpectation("MUL", true);
  var peg$e28 = peg$literalExpectation("DIV", true);
  var peg$e29 = peg$literalExpectation("UDIV", true);
  var peg$e30 = peg$literalExpectation("SDIV", true);
  var peg$e31 = peg$literalExpectation("AND", true);
  var peg$e32 = peg$literalExpectation("ORR", true);
  var peg$e33 = peg$literalExpectation("EOR", true);
  var peg$e34 = peg$otherExpectation("Instrucci\xF3n MOV");
  var peg$e35 = peg$literalExpectation("MOV", true);
  var peg$e36 = peg$otherExpectation("Registro de 64 o 32 Bits");
  var peg$e37 = peg$otherExpectation("Source para MOV");
  var peg$e38 = peg$otherExpectation("Instrucci\xF3n LDR");
  var peg$e39 = peg$literalExpectation("LDR", true);
  var peg$e40 = peg$literalExpectation("=", false);
  var peg$e41 = peg$literalExpectation("[", false);
  var peg$e42 = peg$literalExpectation("]", false);
  var peg$e43 = peg$otherExpectation("Instrucci\xF3n LDRB");
  var peg$e44 = peg$literalExpectation("LDRB", true);
  var peg$e45 = peg$otherExpectation("Instrucci\xF3n LDP");
  var peg$e46 = peg$literalExpectation("LDP", true);
  var peg$e47 = peg$otherExpectation("Instrucci\xF3n STR");
  var peg$e48 = peg$literalExpectation("STR", true);
  var peg$e49 = peg$otherExpectation("Instrucci\xF3n STRB");
  var peg$e50 = peg$literalExpectation("STRB", true);
  var peg$e51 = peg$otherExpectation("Instrucci\xF3n STP");
  var peg$e52 = peg$literalExpectation("STP", true);
  var peg$e53 = peg$otherExpectation("Instrucci\xF3n MVN");
  var peg$e54 = peg$literalExpectation("MVN", true);
  var peg$e55 = peg$otherExpectation("Instrucci\xF3n LSL");
  var peg$e56 = peg$literalExpectation("LSL", true);
  var peg$e57 = peg$otherExpectation("Instrucci\xF3n LSR");
  var peg$e58 = peg$literalExpectation("LSR", true);
  var peg$e59 = peg$otherExpectation("Instrucci\xF3n ASR");
  var peg$e60 = peg$literalExpectation("ASR", true);
  var peg$e61 = peg$otherExpectation("Instrucci\xF3n ROR");
  var peg$e62 = peg$literalExpectation("ROR", true);
  var peg$e63 = peg$otherExpectation("Instrucci\xF3n CMP");
  var peg$e64 = peg$literalExpectation("CMP", true);
  var peg$e65 = peg$otherExpectation("Instruccion CSEL");
  var peg$e66 = peg$literalExpectation("csel", true);
  var peg$e67 = peg$literalExpectation("cset", false);
  var peg$e68 = peg$otherExpectation("Instrucci\xF3n B");
  var peg$e69 = peg$literalExpectation("B", true);
  var peg$e70 = peg$otherExpectation("Instrucci\xF3n BL");
  var peg$e71 = peg$literalExpectation("BL", true);
  var peg$e72 = peg$literalExpectation("BLE", true);
  var peg$e73 = peg$otherExpectation("Instrucci\xF3n RET");
  var peg$e74 = peg$literalExpectation("RET", true);
  var peg$e75 = peg$otherExpectation("Instrucci\xF3n BEQ");
  var peg$e76 = peg$literalExpectation("BEQ", true);
  var peg$e77 = peg$otherExpectation("Instrucci\xF3n BNE");
  var peg$e78 = peg$literalExpectation("BNE", true);
  var peg$e79 = peg$otherExpectation("Instrucci\xF3n BGT");
  var peg$e80 = peg$literalExpectation("BGT", true);
  var peg$e81 = peg$otherExpectation("Instrucci\xF3n BLT");
  var peg$e82 = peg$literalExpectation("BLT", true);
  var peg$e83 = peg$otherExpectation("Instrucci\xF3n SVC");
  var peg$e84 = peg$literalExpectation("SVC", true);
  var peg$e85 = peg$otherExpectation("instruccion uxtb");
  var peg$e86 = peg$literalExpectation("UXTB", true);
  var peg$e87 = peg$otherExpectation("Registro_64_Bits");
  var peg$e88 = peg$literalExpectation("x", true);
  var peg$e89 = peg$literalExpectation("30", false);
  var peg$e90 = peg$classExpectation(["1", "2"], false, false);
  var peg$e91 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e92 = peg$literalExpectation("SP", true);
  var peg$e93 = peg$literalExpectation("LR", true);
  var peg$e94 = peg$literalExpectation("ZR", true);
  var peg$e95 = peg$otherExpectation("Registro_32_Bits");
  var peg$e96 = peg$literalExpectation("w", true);
  var peg$e97 = peg$otherExpectation("Operandor 64 Bits");
  var peg$e98 = peg$otherExpectation("Operandor 32 Bits");
  var peg$e99 = peg$otherExpectation("Operador de Desplazamiento");
  var peg$e100 = peg$otherExpectation("Operador de Extensi\xF3n");
  var peg$e101 = peg$literalExpectation("UXTH", true);
  var peg$e102 = peg$literalExpectation("UXTW", true);
  var peg$e103 = peg$literalExpectation("UXTX", true);
  var peg$e104 = peg$literalExpectation("SXTB", true);
  var peg$e105 = peg$literalExpectation("SXTH", true);
  var peg$e106 = peg$literalExpectation("SXTW", true);
  var peg$e107 = peg$literalExpectation("SXTX", true);
  var peg$e108 = peg$otherExpectation("condicional_csel");
  var peg$e109 = peg$literalExpectation("eq", true);
  var peg$e110 = peg$literalExpectation("ne", true);
  var peg$e111 = peg$literalExpectation("gt", true);
  var peg$e112 = peg$literalExpectation("ge", true);
  var peg$e113 = peg$literalExpectation("lt", true);
  var peg$e114 = peg$literalExpectation("le", true);
  var peg$e115 = peg$literalExpectation("hi", true);
  var peg$e116 = peg$literalExpectation("ls", true);
  var peg$e117 = peg$otherExpectation("Inmediato");
  var peg$e118 = peg$literalExpectation("#", false);
  var peg$e119 = peg$literalExpectation("0b", false);
  var peg$e120 = peg$literalExpectation("0x", false);
  var peg$e121 = peg$literalExpectation("'", false);
  var peg$e122 = peg$classExpectation(["0", "1"], false, false);
  var peg$e123 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e124 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e125 = peg$otherExpectation("Espresi\xF3n");
  var peg$e126 = peg$otherExpectation("Etiqueta");
  var peg$e127 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e128 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e129 = peg$otherExpectation("Numero Entero");
  var peg$e130 = peg$literalExpectation("-", false);
  var peg$e131 = peg$otherExpectation("Cadena de Texto");
  var peg$e132 = peg$literalExpectation("\"", false);
  var peg$e133 = peg$classExpectation(["\""], true, false);
  var peg$e134 = peg$otherExpectation("Linea En Blanco");
  var peg$e135 = peg$otherExpectation("Comentario");
  var peg$e136 = peg$literalExpectation("//", false);
  var peg$e137 = peg$classExpectation(["\n"], true, false);
  var peg$e138 = peg$literalExpectation(";", false);
  var peg$e139 = peg$otherExpectation("Comentario Multilinea");
  var peg$e140 = peg$literalExpectation("/*", false);
  var peg$e141 = peg$classExpectation(["*"], true, false);
  var peg$e142 = peg$classExpectation(["*"], false, false);
  var peg$e143 = peg$classExpectation(["*", "/"], true, false);
  var peg$e144 = peg$literalExpectation("*/", false);
  var peg$e145 = peg$otherExpectation("Ignorado");
  var peg$e146 = peg$classExpectation([" ", "\t"], false, false);

  var peg$f0 = function(i) {return i;};
  var peg$f1 = function(i) {return i;};
  var peg$f2 = function(i) {return i;};
  var peg$f3 = function(i) {return i;};
  var peg$f4 = function(i) {return i;};
  var peg$f5 = function(i) {return i;};
  var peg$f6 = function(i) {return i;};
  var peg$f7 = function(i) {return i;};
  var peg$f8 = function(i) {return i;};
  var peg$f9 = function(i) {return i;};
  var peg$f10 = function(i) {return i;};
  var peg$f11 = function(i) {return i;};
  var peg$f12 = function(i) {return i;};
  var peg$f13 = function(i) {return i;};
  var peg$f14 = function(i) {return i;};
  var peg$f15 = function(i) {return i;};
  var peg$f16 = function(i) {return i;};
  var peg$f17 = function(i) {return i;};
  var peg$f18 = function(i) {return i;};
  var peg$f19 = function(i) {return i;};
  var peg$f20 = function(i) {return i;};
  var peg$f21 = function(i) {return i;};
  var peg$f22 = function(rd, src1, src2) {
        const loc = location()?.start;
        const idRoot = cst.newNode();
        newPath(idRoot, 'Arithmetic', ['add', rd, 'COMA', src1, 'COMA', src2]);
        return new Operation(loc?.line, loc?.column, idRoot, 'Arithmetic', 'add', rd.name, src1.name, src2.name, null);
    };
  var peg$f23 = function(rd, src1, src2) {
        const loc = location()?.start;
        const idRoot = cst.newNode();
        newPath(idRoot, 'Arithmetic', ['add', rd, 'COMA', src1, 'COMA', src2]);
        return new Operation(loc?.line, loc?.column, idRoot, 'Arithmetic', 'add', rd.name, src1.name, src2.name, null);
    };
  var peg$f24 = function(rd, rd1, rd2) {
        const loc = location()?.start;
        const idRoot = cst.newNode();
        newPath(idRoot, 'Arithmetic', ['ands', rd, 'COMA', rd1, 'COMA', rd2]);
        return new Operation(loc?.line, loc?.column, idRoot, 'Arithmetic', 'ands', rd.name, rd1.name, srd2.name, null);
    };
  var peg$f25 = function(rd, src1, src2) {
        const loc = location()?.start;
        const idRoot = cst.newNode();
        newPath(idRoot, 'Arithmetic', ['mul', rd, 'COMA', src1, 'COMA', src2]);
        return new Operation(loc?.line, loc?.column, idRoot, 'Arithmetic', 'mul', rd.name, src1.name, src2.name, null);
    };
  var peg$f26 = function(rd, src1, src2) {
        const loc = location()?.start;
        const idRoot = cst.newNode();
        newPath(idRoot, 'Arithmetic', ['mul', rd, 'COMA', src1, 'COMA', src2]);
        return new Operation(loc?.line, loc?.column, idRoot, 'Arithmetic', 'mul', rd.name, src1.name, src2.name, null);
    };
  var peg$f27 = function(rd, src1, src2) {
        const loc = location()?.start;
        const idRoot = cst.newNode();
        newPath(idRoot, 'Arithmetic', ['div', rd, 'COMA', src1, 'COMA', src2]);
        return new Operation(loc?.line, loc?.column, idRoot, 'Arithmetic', 'div', rd.name, src1.name, src2.name, null);
    };
  var peg$f28 = function(rd, src1, src2) {
        const loc = location()?.start;
        const idRoot = cst.newNode();
        newPath(idRoot, 'Arithmetic', ['div', rd, 'COMA', src1, 'COMA', src2]);
        return new Operation(loc?.line, loc?.column, idRoot, 'Arithmetic', 'div', rd.name, src1.name, src2.name, null);
    };
  var peg$f29 = function(rd, src) {
        const loc = location()?.start;
        const idRoot = cst.newNode();
        newPath(idRoot, 'Control', ['mov', rd, 'COMA', src]);
        return new Operation(loc?.line, loc?.column, idRoot, 'Control', 'mov', rd.name, src.name, null,null);
    };
  var peg$f30 = function(i) {return i;};
  var peg$f31 = function(i) {return i;};
  var peg$f32 = function(i) {return i;};
  var peg$f33 = function(i) {return i;};
  var peg$f34 = function(r, i) {
            return [r, i];
        };
  var peg$f35 = function(r) {
            return [r];
        };
  var peg$f36 = function() {
        let idRoot = cst.newNode(); 
        newPath(idRoot, 'register', [text()]);
        return { id: idRoot, name: text() }
    };
  var peg$f37 = function() {
        let idRoot = cst.newNode(); 
        newPath(idRoot, 'register', [text()]);
        return { id: idRoot, name: text() }
    };
  var peg$f38 = function(int) {return int;};
  var peg$f39 = function(int) {return int; };
  var peg$f40 = function(le) {return le;};
  var peg$f41 = function() {return parseInt(text(), 2);};
  var peg$f42 = function() {return text();};
  var peg$f43 = function(i) {return i;};
  var peg$f44 = function(i) {return i;};
  var peg$f45 = function(id) {
      let completeId = id[0]+id[1]?.join('');
      return completeId; 
    };
  var peg$f46 = function() {return parseInt(text(), 10);};
  var peg$f47 = function() {return text();};
  var peg$f48 = function() {};
  var peg$f49 = function() {};
  var peg$f50 = function() {};
  var peg$f51 = function() {};
  var peg$f52 = function() {};
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsedirective();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesection();
      if (s1 === peg$FAILED) {
        s1 = peg$parseinstruction();
        if (s1 === peg$FAILED) {
          s1 = peg$parsecomment();
          if (s1 === peg$FAILED) {
            s1 = peg$parsemcomment();
            if (s1 === peg$FAILED) {
              s1 = peg$parseblank_line();
            }
          }
        }
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsedirective();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesection();
        if (s1 === peg$FAILED) {
          s1 = peg$parseinstruction();
          if (s1 === peg$FAILED) {
            s1 = peg$parsecomment();
            if (s1 === peg$FAILED) {
              s1 = peg$parsemcomment();
              if (s1 === peg$FAILED) {
                s1 = peg$parseblank_line();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedirective() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parsedirective_p();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsedirective_p();
      if (s4 === peg$FAILED) {
        s4 = peg$parselabel();
        if (s4 === peg$FAILED) {
          s4 = peg$parsestring();
          if (s4 === peg$FAILED) {
            s4 = peg$parseexpression();
          }
        }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = [];
      s6 = peg$parse_();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parse_();
      }
      s6 = peg$parsecomment();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s7 = peg$c0;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s7 === peg$FAILED) {
        s7 = null;
      }
      s1 = [s1, s2, s3, s4, s5, s6, s7];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirective_p() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedirective_name();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirective_name() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c2) {
      s0 = peg$c2;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c3) {
        s0 = peg$c3;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c4) {
          s0 = peg$c4;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c5) {
            s0 = peg$c5;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c6) {
              s0 = peg$c6;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c7) {
                s0 = peg$c7;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c8) {
                  s0 = peg$c8;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c9) {
                    s0 = peg$c9;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c10) {
                      s0 = peg$c10;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e10); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c11) {
                        s0 = peg$c11;
                        peg$currPos += 6;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e11); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c12) {
                          s0 = peg$c12;
                          peg$currPos += 7;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e12); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c13) {
                            s0 = peg$c13;
                            peg$currPos += 5;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e13); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c14) {
                              s0 = peg$c14;
                              peg$currPos += 4;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e14); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c15) {
                                s0 = peg$c15;
                                peg$currPos += 6;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e15); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c16) {
                                  s0 = peg$c16;
                                  peg$currPos += 3;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 3) === peg$c17) {
                                    s0 = peg$c17;
                                    peg$currPos += 3;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e17); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c18) {
                                      s0 = peg$c18;
                                      peg$currPos += 3;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e18); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesection() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parselabel();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c19;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstruction() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseadd_inst();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesub_inst();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f1(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemul_inst();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f2(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsediv_inst();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f3(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseudiv_inst();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f4(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseuxtb_inst();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f5(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsesdiv_inst();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f6(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseands_inst();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f7(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseand_inst();
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f8(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseorr_inst();
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f9(s1);
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseeor_inst();
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f10(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsemov_inst();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f11(s1);
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsemvn_inst();
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f12(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseldr_inst();
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f13(s1);
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseldrb_inst();
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f14(s1);
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseldp_inst();
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f15(s1);
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parsestrb_inst();
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$f16(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parsestr_inst();
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f17(s1);
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parsestp_inst();
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$f18(s1);
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parselsl_inst();
                                          if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f19(s1);
                                          }
                                          s0 = s1;
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parselsr_inst();
                                            if (s1 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$f20(s1);
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseasr_inst();
                                              if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$f21(s1);
                                              }
                                              s0 = s1;
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseror_inst();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsecmp_inst();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsecsel_inst();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsecset_inst();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsebeq_inst();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsebne_inst();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsebgt_inst();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseblt_inst();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseble_inst();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsebl_inst();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseb_inst();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseret_inst();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsesvc_inst();
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseadd_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c20) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f22(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c20) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f23(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseands_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c22) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsereg64_or_reg32();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c23) {
              s7 = peg$c23;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseimmediate();
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parse_();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parse_();
                }
                s10 = peg$parsecomment();
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s11 = peg$c0;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s11 === peg$FAILED) {
                  s11 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f24(s4, s6, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parsesub_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c24) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c24) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemul_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c25) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f25(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c25) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f26(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsediv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c26) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f27(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c26) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f28(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseudiv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c27) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c27) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesdiv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c28) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c28) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseand_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c29) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c29) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseorr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c30) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c30) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseeor_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c31) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c31) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemov_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c32) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsemov_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f29(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parsereg64_or_reg32() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsereg64();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsereg32();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f31(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parsemov_source() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsereg64_or_reg32();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseimmediate();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f33(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parseldr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c33) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseldr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c33) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseldr_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parseldr_source() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselabel();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c35;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        s3 = peg$parsereg64_or_reg32();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c21;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            s7 = peg$parsereg64_or_reg32();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parse_();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c21;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s9 !== peg$FAILED) {
                s10 = [];
                s11 = peg$parse_();
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$parse_();
                }
                s11 = peg$parseshift_op();
                if (s11 !== peg$FAILED) {
                  s12 = [];
                  s13 = peg$parse_();
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    s13 = peg$parse_();
                  }
                  s13 = peg$parseimmediate();
                  if (s13 !== peg$FAILED) {
                    s14 = [];
                    s15 = peg$parse_();
                    while (s15 !== peg$FAILED) {
                      s14.push(s15);
                      s15 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s15 = peg$c36;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e42); }
                    }
                    if (s15 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c35;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$parsereg64();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c21;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              s7 = peg$parseimmediate();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse_();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c21;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$parse_();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parse_();
                  }
                  s11 = peg$parseshift_op();
                  if (s11 !== peg$FAILED) {
                    s12 = [];
                    s13 = peg$parse_();
                    while (s13 !== peg$FAILED) {
                      s12.push(s13);
                      s13 = peg$parse_();
                    }
                    s13 = peg$parseimmediate();
                    if (s13 !== peg$FAILED) {
                      s14 = [];
                      s15 = peg$parse_();
                      while (s15 !== peg$FAILED) {
                        s14.push(s15);
                        s15 = peg$parse_();
                      }
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s15 = peg$c36;
                        peg$currPos++;
                      } else {
                        s15 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e42); }
                      }
                      if (s15 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c35;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = peg$parsereg64();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c21;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                s7 = peg$parseimmediate();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s9 = peg$c21;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$parse_();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parse_();
                    }
                    s11 = peg$parseextend_op();
                    if (s11 !== peg$FAILED) {
                      s12 = [];
                      s13 = peg$parse_();
                      while (s13 !== peg$FAILED) {
                        s12.push(s13);
                        s13 = peg$parse_();
                      }
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s13 = peg$c36;
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e42); }
                      }
                      if (s13 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c35;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e41); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$parsereg64();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parse_();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c21;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parse_();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parse_();
                  }
                  s7 = peg$parseimmediate();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parse_();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s9 = peg$c36;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e42); }
                    }
                    if (s9 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c35;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e41); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse_();
                }
                s3 = peg$parsereg64();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parse_();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c36;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e42); }
                  }
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseldrb_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c37) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseldr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c37) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseldr_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parseldp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c38) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseldr_source();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c38) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseldr_source();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parsestr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c39) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsestr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c39) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsestr_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parsestr_source() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      s3 = peg$parsereg64_or_reg32();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c21;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parse_();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parse_();
          }
          s7 = peg$parsereg64_or_reg32();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$parse_();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c21;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s9 !== peg$FAILED) {
              s10 = [];
              s11 = peg$parse_();
              while (s11 !== peg$FAILED) {
                s10.push(s11);
                s11 = peg$parse_();
              }
              s11 = peg$parseshift_op();
              if (s11 !== peg$FAILED) {
                s12 = [];
                s13 = peg$parse_();
                while (s13 !== peg$FAILED) {
                  s12.push(s13);
                  s13 = peg$parse_();
                }
                s13 = peg$parseimmediate();
                if (s13 !== peg$FAILED) {
                  s14 = [];
                  s15 = peg$parse_();
                  while (s15 !== peg$FAILED) {
                    s14.push(s15);
                    s15 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s15 = peg$c36;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e42); }
                  }
                  if (s15 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c35;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        s3 = peg$parsereg64();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c21;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            s7 = peg$parseimmediate();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parse_();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c21;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s9 !== peg$FAILED) {
                s10 = [];
                s11 = peg$parse_();
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$parse_();
                }
                s11 = peg$parseshift_op();
                if (s11 !== peg$FAILED) {
                  s12 = [];
                  s13 = peg$parse_();
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    s13 = peg$parse_();
                  }
                  s13 = peg$parseimmediate();
                  if (s13 !== peg$FAILED) {
                    s14 = [];
                    s15 = peg$parse_();
                    while (s15 !== peg$FAILED) {
                      s14.push(s15);
                      s15 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s15 = peg$c36;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e42); }
                    }
                    if (s15 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c35;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$parsereg64();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c21;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              s7 = peg$parseimmediate();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse_();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c21;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$parse_();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parse_();
                  }
                  s11 = peg$parseextend_op();
                  if (s11 !== peg$FAILED) {
                    s12 = [];
                    s13 = peg$parse_();
                    while (s13 !== peg$FAILED) {
                      s12.push(s13);
                      s13 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s13 = peg$c36;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e42); }
                    }
                    if (s13 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c35;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = peg$parsereg64();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c21;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                s7 = peg$parseimmediate();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s9 = peg$c36;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e42); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f34(s3, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c35;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e41); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$parsereg64();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parse_();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 93) {
                  s5 = peg$c36;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e42); }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f35(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsestrb_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c40) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsestr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c40) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsestr_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parsestp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c41) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parsestr_source();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c41) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsestr_source();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parsemvn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c42) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsemov_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c42) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsemov_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parselsl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c43) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c43) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parselsr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c44) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c44) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parseasr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c45) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c45) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parseror_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c46) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c21;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c46) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c21;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

    return s0;
  }

  function peg$parsecmp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c47) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c21;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseoperand64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c47) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c21;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseoperand32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parsecsel_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c48) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parse_();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parse_();
          }
          s7 = peg$parsereg64_or_reg32();
          if (s7 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c23) {
              s8 = peg$c23;
              peg$currPos += 2;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsereg64_or_reg32();
              if (s10 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c23) {
                  s11 = peg$c23;
                  peg$currPos += 2;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e25); }
                }
                if (s11 !== peg$FAILED) {
                  s12 = peg$parsecond();
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = peg$parse_();
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = peg$parse_();
                    }
                    s14 = peg$parsecomment();
                    if (s14 === peg$FAILED) {
                      s14 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s15 = peg$c0;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s15 === peg$FAILED) {
                      s15 = null;
                    }
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }

    return s0;
  }

  function peg$parsecset_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (input.substr(peg$currPos, 4) === peg$c49) {
      s2 = peg$c49;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg32();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsecond();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsecomment();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s9 = peg$c0;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseb_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c50) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }

    return s0;
  }

  function peg$parsebl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c51) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }

    return s0;
  }

  function peg$parseble_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c52) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseret_inst() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c53) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsecomment();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s5 = peg$c0;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s1 = [s1, s2, s3, s4, s5];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }

    return s0;
  }

  function peg$parsebeq_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c54) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }

    return s0;
  }

  function peg$parsebne_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c55) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }

    return s0;
  }

  function peg$parsebgt_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c56) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }

    return s0;
  }

  function peg$parseblt_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c57) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }

    return s0;
  }

  function peg$parsesvc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c58) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parseimmediate();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s1 = [s1, s2, s3, s4, s5, s6, s7];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parseuxtb_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c59) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c21;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parse_();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parse_();
          }
          s7 = peg$parsereg32();
          if (s7 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5, s6, s7];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }

    return s0;
  }

  function peg$parsereg64() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c60) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c61) {
        s2 = peg$c61;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = input.charAt(peg$currPos);
        if (peg$r0.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s3 !== peg$FAILED) {
          s4 = input.charAt(peg$currPos);
          if (peg$r1.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = input.charAt(peg$currPos);
          if (peg$r1.test(s2)) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f36();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 2);
      if (s0.toLowerCase() === peg$c62) {
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 2);
        if (s0.toLowerCase() === peg$c63) {
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 2);
          if (s0.toLowerCase() === peg$c64) {
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e94); }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parsereg32() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c65) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c61) {
        s2 = peg$c61;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = input.charAt(peg$currPos);
        if (peg$r0.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s3 !== peg$FAILED) {
          s4 = input.charAt(peg$currPos);
          if (peg$r1.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = input.charAt(peg$currPos);
          if (peg$r1.test(s2)) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f37();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }

    return s0;
  }

  function peg$parseoperand64() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsereg64();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c21;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        s5 = peg$parseextend_op();
        if (s5 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsereg64();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c21;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          s6 = peg$parseshift_op();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseimmediate();
            if (s8 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6, s7, s8];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseimmediate();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parseoperand32() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsereg32();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c21;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parseshift_op();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseimmediate();
          if (s8 !== peg$FAILED) {
            s3 = [s3, s4, s5, s6, s7, s8];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseimmediate();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parseshift_op() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c43) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 3);
      if (s0.toLowerCase() === peg$c44) {
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 3);
        if (s0.toLowerCase() === peg$c45) {
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parseextend_op() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c59) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 4);
      if (s0.toLowerCase() === peg$c66) {
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 4);
        if (s0.toLowerCase() === peg$c67) {
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e102); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 4);
          if (s0.toLowerCase() === peg$c68) {
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e103); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 4);
            if (s0.toLowerCase() === peg$c69) {
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 4);
              if (s0.toLowerCase() === peg$c70) {
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e105); }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 4);
                if (s0.toLowerCase() === peg$c71) {
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e106); }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.substr(peg$currPos, 4);
                  if (s0.toLowerCase() === peg$c72) {
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e107); }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parsecond() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c73) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 2);
      if (s0.toLowerCase() === peg$c74) {
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 2);
        if (s0.toLowerCase() === peg$c75) {
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 2);
          if (s0.toLowerCase() === peg$c76) {
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e112); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 2);
            if (s0.toLowerCase() === peg$c77) {
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e113); }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 2);
              if (s0.toLowerCase() === peg$c78) {
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e114); }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 2);
                if (s0.toLowerCase() === peg$c79) {
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e115); }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.substr(peg$currPos, 2);
                  if (s0.toLowerCase() === peg$c80) {
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e116); }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }

    return s0;
  }

  function peg$parseimmediate() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s2 = peg$c82;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsebinary_literal();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f38(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c81;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.substr(peg$currPos, 2) === peg$c83) {
        s2 = peg$c83;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsehex_literal();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c81;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e118); }
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c81;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e118); }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c84;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e121); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseletter();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s4 = peg$c84;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e121); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f40(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parsebinary_literal() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r2.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r2.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehex_literal() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r3.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r3.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e123); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseletter() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r4.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parselabel();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f43(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f44(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }

    return s0;
  }

  function peg$parselabel() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r6.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f45(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c85;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r1.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r1.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e91); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f46();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c86;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r7.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e133); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r7.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e133); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c86;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e132); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f47();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }

    return s0;
  }

  function peg$parseblank_line() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parsecomment();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.charCodeAt(peg$currPos) === 10) {
      s3 = peg$c0;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f48();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c87) {
      s2 = peg$c87;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r8.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r8.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s2 = peg$c88;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e138); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r8.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r8.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e137); }
          }
        }
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f50();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }

    return s0;
  }

  function peg$parsemcomment() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e141); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r10.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e142); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r10.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e142); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r11.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e143); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r9.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e141); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = input.charAt(peg$currPos);
          if (peg$r10.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e142); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = input.charAt(peg$currPos);
              if (peg$r10.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e142); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = input.charAt(peg$currPos);
            if (peg$r11.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e143); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c90) {
        s3 = peg$c90;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e144); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f51();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r12.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r12.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e146); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f52();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }

    return s0;
  }


    class Cst {
    constructor() {
        this.Nodes = [];
        this.Edges = [];
        this.idCount = 0;
    }

    newNode(){
        let count = this.idCount; 
        this.idCount++;
        return `${count}`
    }

    addNode(id, label){
        this.Nodes.push({
            id: id, 
            label: label,
        });
    }

    addEdge(from, to){
        this.Edges.push({
            from: from, 
            to: to,
        });
    }
}
  // Creando cst 
  let cst = new Cst();
  // Agregar nodos
  function newPath(idRoot, nameRoot, nodes) {
    cst.addNode(idRoot, nameRoot);
    for (let node of nodes) {
      if (typeof node !== "string"){
        cst.addEdge(idRoot, node?.id);
        continue;
      }
      let newNode = cst.newNode();
      cst.addNode(newNode, node);
      cst.addEdge(idRoot, newNode);
    }
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  return {
    StartRules: ["start"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()
;
